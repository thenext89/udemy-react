{"ast":null,"code":"var _jsxFileName = \"/Volumes/WORK/LearnReactjs/src/App.js\",\n  _s = $RefreshSig$();\n// import { Container, Row } from 'react-bootstrap';\n// import './App.scss';\n// import Header from './component/Header';\n// import TableUsers from './component/TableUsers';\n// import ModalAddNew from './component/ModalAddNew';\n\nimport { useState, useMemo, useRef, useReducer } from 'react'; //useMemo: Tranhs tinh toan lai nhung thu k can thiet (Tangw hieu nang) useMemo() || // useRef: giong ref ben vue\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n// const orders = [100, 200, 500];\n\n// useReducer\n// initState\n// Action\n// Reducer\n// Dispatch\n//--------------------\n// initState\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initState = 0;\n// Action\nconst UP_ACTION = 'up';\nconst DOWN_ACTION = 'down';\n\n// Reducer\nconst reducer = (state, action) => {\n  switch (action) {\n    case UP_ACTION:\n      return state + 1;\n    case DOWN_ACTION:\n      return state - 1;\n    default:\n      throw new Error('Invalid state');\n  }\n};\n// Dispatch\n\nfunction App() {\n  _s();\n  // Ex Counter\n  //   const [counter, setCounter] = useState(() => {\n  //     const total = orders.reduce((total, cur) => total + cur);\n  //     console.log(total);\n  //     return total;\n  //   })\n  //     const handleIncrease = () => {\n\n  //         // setCounter(counter+1);\n  //         setCounter(preState => preState + 1);\n  //     }\n  // Ex Change \n  // const [info, setInfo] = useState({\n  //     name: 'Tiep',\n  //     age: '12',\n  //     job: 'Coder'\n  // });\n  // const handleChange = () => {\n  //     setInfo(prev => (\n  //         {   \n  //             ...prev,\n  //             bio: 'yellow'\n  //         }\n  //         )\n  //     )\n  // }\n  // const [name, setName] = useState('');\n  // const [price, setPrice] = useState('');\n  // const [products, setProduct] = useState([]);\n  const base1Ref = useRef();\n  const base2Ref = useRef();\n  const number1Ref = useRef();\n  const number2Ref = useRef();\n  const [count, dispatch] = useReducer(reducer, initState);\n  const pow = (a, b) => {\n    return a ** b;\n  };\n  const hexToOctal = hexNumber => {\n    if (!/^0x[0-9a-f]+$/i.test(hexNumber)) {\n      return null; // Chuỗi không hợp lệ\n    }\n\n    const decimalNumber = parseInt(hexNumber, 16); // Chuyển đổi từ hệ thập lục phân sang thập phân\n    return decimalToX(decimalNumber, 8); // Sử dụng hàm chuyển đổi số thập phân sang bát phân đã được định nghĩa ở trước đó\n  };\n\n  const hexToBinary = hexNumber => {\n    // Đảm bảo chuỗi hexNumber bắt đầu bằng \"0x\" và loại bỏ nó nếu có\n    if (hexNumber.startsWith(\"0x\")) {\n      hexNumber = hexNumber.substring(2);\n    }\n    let binaryResult = \"\";\n    for (let i = 0; i < hexNumber.length; i++) {\n      const hexDigit = parseInt(hexNumber[i], 16); // Chuyển đổi ký tự hex thành số thập phân\n      const binaryDigit = hexDigit.toString(2); // Chuyển số thập phân thành số nhị phân\n      // Đảm bảo rằng kết quả có độ dài 4 ký tự bằng cách thêm số 0 đầu tiên nếu cần\n      binaryResult += binaryDigit.padStart(4, \"0\");\n    }\n    return binaryResult;\n  };\n  const octalToHexadecimal = octalNumber => {\n    const decimalNumber = parseInt(octalNumber, 8); // Chuyển đổi từ cơ số 8 sang cơ số 10\n    const hexadecimalNumber = decimalNumber.toString(16).toUpperCase(); // Chuyển đổi từ cơ số 10 sang cơ số 16 và chuyển thành chữ hoa\n\n    return hexadecimalNumber;\n  };\n  const octalToBinary = octalNumber => {\n    if (!/^[0-7]+$/.test(octalNumber)) {\n      return null; // Trả về null nếu chuỗi không phải là số ở cơ số 8 hợp lệ\n    }\n\n    const decimalNumber = parseInt(octalNumber, 8); // Convert octal to decimal\n    const binaryNumber = decimalNumber.toString(2); // Convert decimal to binary\n    return binaryNumber;\n  };\n  const decimalToX = (decimalNumber, base) => {\n    if (decimalNumber < 0) {\n      return null; // Không hỗ trợ số âm trong cơ số 8\n    }\n\n    if (decimalNumber === 0) {\n      return \"0\"; // Trường hợp số 0\n    }\n\n    let result = \"\";\n    while (decimalNumber > 0) {\n      if (base == 16) {\n        const remainder = decimalNumber % 16; // Lấy phần dư khi chia cho 16\n        const hexDigit = remainder < 10 ? remainder.toString() : String.fromCharCode(87 + remainder); // Chuyển đổi thành chữ số hex hoặc ký tự\n        result = hexDigit + result; // Thêm chữ số hex vào kết quả ở phía trước\n        decimalNumber = Math.floor(decimalNumber / 16); // Lấy phần nguyên của phép chia cho 16\n      } else {\n        const remainder = decimalNumber % base; // Lấy phần dư khi chia cho base\n        result = remainder.toString() + result; // Thêm phần dư vào kết quả ở phía trước\n        decimalNumber = Math.floor(decimalNumber / base); // Lấy phần nguyên của phép chia cho 8\n      }\n    }\n\n    return result;\n  };\n  const binaryToOctal = binaryNumber => {\n    // Hãy đảm bảo rằng chuỗi đầu vào là chuỗi nhị phân hợp lệ\n    if (!/^[01]+$/.test(binaryNumber)) {\n      return null;\n    }\n\n    // Bước 1: Thêm số 0 vào đầu chuỗi để đảm bảo độ dài của nó chia hết cho 3\n    while (binaryNumber.length % 3 !== 0) {\n      binaryNumber = '0' + binaryNumber;\n    }\n\n    // Bước 2: Chia chuỗi thành các khối có 3 ký tự và chuyển đổi từng khối sang cơ số 8\n    let octalResult = '';\n    for (let i = 0; i < binaryNumber.length; i += 3) {\n      const binaryBlock = binaryNumber.substr(i, 3);\n      const octalBlock = parseInt(binaryBlock, 2).toString(8);\n      octalResult += octalBlock;\n    }\n    return octalResult;\n  };\n  const binaryToHexadecimal = binaryNumber => {\n    const binaryRegex = /^[01]+$/;\n\n    // Kiểm tra xem đầu vào có phải là số nhị phân hợp lệ không\n    if (!binaryRegex.test(binaryNumber)) {\n      return null; // Nếu không phải số nhị phân, trả về null\n    }\n\n    // Thực hiện chuyển đổi\n    const decimalNumber = parseInt(binaryNumber, 2); // Chuyển đổi sang cơ số 10\n    const hexadecimalNumber = decimalNumber.toString(16).toUpperCase(); // Chuyển đổi sang cơ số 16 và viết hoa\n\n    return hexadecimalNumber;\n  };\n  const handlerConvert = event => {\n    console.log('GGGGG', pow(10, 2));\n    let newNumber1 = number1Ref.current.value;\n    let newBase1 = base1Ref.current.value;\n    let newBase2 = base2Ref.current.value;\n    switch (newBase1) {\n      case '8':\n        switch (newBase2) {\n          case '16':\n            number2Ref.current.value = octalToHexadecimal(newNumber1);\n            break;\n          case '2':\n            number2Ref.current.value = octalToBinary(newNumber1);\n            break;\n          case '10':\n            let val = 0,\n              p = newNumber1.length - 1;\n            for (let i = 0; i < newNumber1.length; i++) {\n              val = val + newNumber1[i] * pow(8, p);\n              p = p - 1;\n            }\n            number2Ref.current.value = val;\n            break;\n          default:\n            break;\n        }\n        break;\n      case '10':\n        console.log('case: 10');\n        switch (newBase2) {\n          case '8':\n          case '2':\n          case '16':\n            number2Ref.current.value = decimalToX(newNumber1, parseInt(newBase2));\n            break;\n          default:\n            break;\n        }\n        break;\n      case '2':\n        switch (newBase2) {\n          case '8':\n            number2Ref.current.value = binaryToOctal(newNumber1);\n            break;\n          case '10':\n            number2Ref.current.value = parseInt(newNumber1, 2);\n            break;\n          case '16':\n            number2Ref.current.value = binaryToHexadecimal(newNumber1);\n            break;\n          default:\n            break;\n        }\n        break;\n      case '16':\n        switch (newBase2) {\n          case '8':\n            number2Ref.current.value = hexToOctal(newNumber1);\n            break;\n          case '2':\n            number2Ref.current.value = hexToBinary(newNumber1);\n            break;\n          case '10':\n            number2Ref.current.value = parseInt(newNumber1, 16);\n            break;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n  };\n  // const handleSubmit = () => {\n\n  //   setProduct([...products,{\n  //     name,\n  //     price: Number(price)\n  //   }])\n  // }\n  // const total = products.reduce((result, pord) => result + pord.price, 0);\n  // const total = useMemo(() => {\n  //   console.log('runnnnnn');\n  //   const result = products.reduce((result, pord) => result + pord.price, 0);\n  //   setName('');\n  //   setPrice('');\n  //   console.log(nameRef.current);\n  //   nameRef.current && nameRef.current.focus();\n  //   return result;\n  // }, [products])\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '20px',\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"He so:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"\",\n            id: \"\",\n            ref: base1Ref,\n            onChange: handlerConvert,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"2\",\n              children: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"8\",\n              children: \"8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"10\",\n              children: \"10\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"16\",\n              children: \"16\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: number1Ref,\n          onChange: handlerConvert\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"He so:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"\",\n            id: \"\",\n            ref: base2Ref,\n            onChange: handlerConvert,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"2\",\n              children: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"8\",\n              children: \"8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"10\",\n              children: \"10\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"16\",\n              children: \"16\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: number2Ref,\n          disabled: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bdy5BwcaDblnRqmCi05OC64T3SI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useMemo","useRef","useReducer","jsxDEV","_jsxDEV","initState","UP_ACTION","DOWN_ACTION","reducer","state","action","Error","App","_s","base1Ref","base2Ref","number1Ref","number2Ref","count","dispatch","pow","a","b","hexToOctal","hexNumber","test","decimalNumber","parseInt","decimalToX","hexToBinary","startsWith","substring","binaryResult","i","length","hexDigit","binaryDigit","toString","padStart","octalToHexadecimal","octalNumber","hexadecimalNumber","toUpperCase","octalToBinary","binaryNumber","base","result","remainder","String","fromCharCode","Math","floor","binaryToOctal","octalResult","binaryBlock","substr","octalBlock","binaryToHexadecimal","binaryRegex","handlerConvert","event","console","log","newNumber1","current","value","newBase1","newBase2","val","p","className","children","style","padding","display","name","id","ref","onChange","fileName","_jsxFileName","lineNumber","columnNumber","type","disabled","_c","$RefreshReg$"],"sources":["/Volumes/WORK/LearnReactjs/src/App.js"],"sourcesContent":["\n// import { Container, Row } from 'react-bootstrap';\n// import './App.scss';\n// import Header from './component/Header';\n// import TableUsers from './component/TableUsers';\n// import ModalAddNew from './component/ModalAddNew';\n\nimport { useState, useMemo, useRef, useReducer } from 'react'; //useMemo: Tranhs tinh toan lai nhung thu k can thiet (Tangw hieu nang) useMemo() || // useRef: giong ref ben vue\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n// const orders = [100, 200, 500];\n\n// useReducer\n// initState\n// Action\n// Reducer\n// Dispatch\n//--------------------\n// initState\nconst initState = 0;\n// Action\nconst UP_ACTION = 'up';\nconst DOWN_ACTION = 'down';\n\n// Reducer\nconst reducer = (state, action) => {\n  switch(action) {\n    case UP_ACTION: \n      return state + 1;\n    case DOWN_ACTION:\n      return state - 1;\n    default: \n      throw new Error('Invalid state');\n  }\n}\n// Dispatch\n\n\nfunction App() {\n// Ex Counter\n//   const [counter, setCounter] = useState(() => {\n//     const total = orders.reduce((total, cur) => total + cur);\n//     console.log(total);\n//     return total;\n//   })\n//     const handleIncrease = () => {\n\n//         // setCounter(counter+1);\n//         setCounter(preState => preState + 1);\n//     }\n// Ex Change \n    // const [info, setInfo] = useState({\n    //     name: 'Tiep',\n    //     age: '12',\n    //     job: 'Coder'\n    // });\n    // const handleChange = () => {\n    //     setInfo(prev => (\n    //         {   \n    //             ...prev,\n    //             bio: 'yellow'\n    //         }\n    //         )\n    //     )\n    // }\n    // const [name, setName] = useState('');\n    // const [price, setPrice] = useState('');\n    // const [products, setProduct] = useState([]);\n    const base1Ref = useRef();\n    const base2Ref = useRef();\n    const number1Ref = useRef();\n    const number2Ref = useRef();\n    const [count, dispatch] = useReducer(reducer, initState);\n    const pow = (a, b) => {\n      return a ** b;\n    };\n    const hexToOctal = (hexNumber) => {\n      if (!/^0x[0-9a-f]+$/i.test(hexNumber)) {\n        return null; // Chuỗi không hợp lệ\n      }\n    \n      const decimalNumber = parseInt(hexNumber, 16); // Chuyển đổi từ hệ thập lục phân sang thập phân\n      return decimalToX(decimalNumber, 8); // Sử dụng hàm chuyển đổi số thập phân sang bát phân đã được định nghĩa ở trước đó\n    }\n    const hexToBinary = (hexNumber) => {\n      // Đảm bảo chuỗi hexNumber bắt đầu bằng \"0x\" và loại bỏ nó nếu có\n      if (hexNumber.startsWith(\"0x\")) {\n        hexNumber = hexNumber.substring(2);\n      }\n    \n      let binaryResult = \"\";\n      for (let i = 0; i < hexNumber.length; i++) {\n        const hexDigit = parseInt(hexNumber[i], 16); // Chuyển đổi ký tự hex thành số thập phân\n        const binaryDigit = hexDigit.toString(2); // Chuyển số thập phân thành số nhị phân\n        // Đảm bảo rằng kết quả có độ dài 4 ký tự bằng cách thêm số 0 đầu tiên nếu cần\n        binaryResult += binaryDigit.padStart(4, \"0\");\n      }\n    \n      return binaryResult;\n    }\n    const octalToHexadecimal = (octalNumber) => {\n      const decimalNumber = parseInt(octalNumber, 8); // Chuyển đổi từ cơ số 8 sang cơ số 10\n      const hexadecimalNumber = decimalNumber.toString(16).toUpperCase(); // Chuyển đổi từ cơ số 10 sang cơ số 16 và chuyển thành chữ hoa\n    \n      return hexadecimalNumber;\n    }\n    const octalToBinary = (octalNumber) => {\n      if (!/^[0-7]+$/.test(octalNumber)) {\n        return null; // Trả về null nếu chuỗi không phải là số ở cơ số 8 hợp lệ\n      }\n    \n\n        const decimalNumber = parseInt(octalNumber, 8); // Convert octal to decimal\n        const binaryNumber = decimalNumber.toString(2); // Convert decimal to binary\n        return binaryNumber;\n    }\n    \n    const decimalToX = (decimalNumber, base) => {\n      if (decimalNumber < 0) {\n        return null; // Không hỗ trợ số âm trong cơ số 8\n      }\n    \n      if (decimalNumber === 0) {\n        return \"0\"; // Trường hợp số 0\n      }\n    \n      let result = \"\";\n      while (decimalNumber > 0) {\n        if(base == 16) {\n          const remainder = decimalNumber % 16; // Lấy phần dư khi chia cho 16\n          const hexDigit = remainder < 10 ? remainder.toString() : String.fromCharCode(87 + remainder); // Chuyển đổi thành chữ số hex hoặc ký tự\n          result = hexDigit + result; // Thêm chữ số hex vào kết quả ở phía trước\n          decimalNumber = Math.floor(decimalNumber / 16); // Lấy phần nguyên của phép chia cho 16\n        }\n        else {\n          const remainder = decimalNumber % base; // Lấy phần dư khi chia cho base\n          result = remainder.toString() + result; // Thêm phần dư vào kết quả ở phía trước\n          decimalNumber = Math.floor(decimalNumber / base); // Lấy phần nguyên của phép chia cho 8\n        }\n\n      }\n    \n      return result;\n    }\n    const binaryToOctal = (binaryNumber) => {\n      // Hãy đảm bảo rằng chuỗi đầu vào là chuỗi nhị phân hợp lệ\n      if (!/^[01]+$/.test(binaryNumber)) {\n        return null;\n      }\n    \n      // Bước 1: Thêm số 0 vào đầu chuỗi để đảm bảo độ dài của nó chia hết cho 3\n      while (binaryNumber.length % 3 !== 0) {\n        binaryNumber = '0' + binaryNumber;\n      }\n    \n      // Bước 2: Chia chuỗi thành các khối có 3 ký tự và chuyển đổi từng khối sang cơ số 8\n      let octalResult = '';\n      for (let i = 0; i < binaryNumber.length; i += 3) {\n        const binaryBlock = binaryNumber.substr(i, 3);\n        const octalBlock = parseInt(binaryBlock, 2).toString(8);\n        octalResult += octalBlock;\n      }\n    \n      return octalResult;\n    }\n    const binaryToHexadecimal = (binaryNumber) => {\n      const binaryRegex = /^[01]+$/;\n      \n      // Kiểm tra xem đầu vào có phải là số nhị phân hợp lệ không\n      if (!binaryRegex.test(binaryNumber)) {\n        return null; // Nếu không phải số nhị phân, trả về null\n      }\n    \n      // Thực hiện chuyển đổi\n      const decimalNumber = parseInt(binaryNumber, 2); // Chuyển đổi sang cơ số 10\n      const hexadecimalNumber = decimalNumber.toString(16).toUpperCase(); // Chuyển đổi sang cơ số 16 và viết hoa\n    \n      return hexadecimalNumber;\n    }\n    const handlerConvert = (event) => {\n      console.log('GGGGG', pow(10,2));\n      let newNumber1 = number1Ref.current.value\n      let newBase1 = base1Ref.current.value\n      let newBase2 = base2Ref.current.value\n      switch(newBase1) {\n        case '8': \n          switch(newBase2) {\n            case '16': \n             number2Ref.current.value = octalToHexadecimal(newNumber1);\n              break;\n            case '2': \n              number2Ref.current.value = octalToBinary(newNumber1)\n              break;\n            case '10':\n              let val = 0, p = newNumber1.length - 1;\n              for(let i = 0; i < newNumber1.length; i++) {\n                val = val + newNumber1[i] * pow(8, p);\n                p = p - 1;\n              }\n              number2Ref.current.value = val;\n              break;\n            default: break;\n          }\n          break;\n        case '10': \n        console.log('case: 10');\n          switch(newBase2) {\n            case '8':\n            case '2':\n            case '16':\n              number2Ref.current.value = decimalToX(newNumber1, parseInt(newBase2));\n              break;\n            default: break;\n          }\n          break;\n        case '2': \n          switch(newBase2) {\n            case '8':\n              number2Ref.current.value = binaryToOctal(newNumber1);\n              break;\n            case '10':\n              number2Ref.current.value = parseInt(newNumber1, 2);\n              break;\n            case '16':\n              number2Ref.current.value = binaryToHexadecimal(newNumber1);\n              break;\n            default: break;\n          }\n        break;\n        case '16': \n          switch(newBase2) {\n            case '8':\n              number2Ref.current.value = hexToOctal(newNumber1);\n              break;\n            case '2':\n              number2Ref.current.value = hexToBinary(newNumber1);\n              break;\n            case '10':\n              number2Ref.current.value = parseInt(newNumber1, 16);\n              break;\n            default: break;\n          }\n        break;\n          \n        default: break;\n      }\n      \n    }\n    // const handleSubmit = () => {\n      \n    //   setProduct([...products,{\n    //     name,\n    //     price: Number(price)\n    //   }])\n    // }\n    // const total = products.reduce((result, pord) => result + pord.price, 0);\n    // const total = useMemo(() => {\n    //   console.log('runnnnnn');\n    //   const result = products.reduce((result, pord) => result + pord.price, 0);\n    //   setName('');\n    //   setPrice('');\n    //   console.log(nameRef.current);\n    //   nameRef.current && nameRef.current.focus();\n    //   return result;\n    // }, [products])\n  return (\n    <div className='app-container'>\n      <div style={{padding: '20px', display:'flex'}}>\n        {/* <h1>{count}</h1>\n        <button \n          onClick={() => dispatch(UP_ACTION)}\n        >\n          Up\n        </button>\n        <button \n          onClick={() => dispatch(DOWN_ACTION)}\n          >\n          Down\n        </button> */}\n        <div className='wrapper'>\n          <div>\n            He so: \n            <select name=\"\" id=\"\" ref={base1Ref} onChange={handlerConvert}>\n              <option value=\"2\">2</option>\n              <option value=\"8\">8</option>\n              <option value=\"10\">10</option>\n              <option value=\"16\">16</option>\n            </select>\n          </div>\n          <input type=\"text\" ref={number1Ref}  onChange={handlerConvert}/>\n\n        </div>\n        <div className='wrapper'>\n          <div>\n            He so: \n            <select name=\"\" id=\"\" ref={base2Ref} onChange={handlerConvert}>\n              <option value=\"2\">2</option>\n              <option value=\"8\">8</option>\n              <option value=\"10\">10</option>\n              <option value=\"16\">16</option>\n            </select>\n          </div>\n          <input type=\"text\" ref={number2Ref} disabled/>\n\n        </div>\n        \n        {/* <input value={name}\n              ref={nameRef}\n              placeholder='Enter name...'\n              onChange={e => setName(e.target.value)}\n        />\n        <br></br>\n        <input value={price}\n              placeholder='Enter price...'\n              onChange={e => setPrice(e.target.value)}\n        />\n        <br></br>\n        <button onClick={handleSubmit}>\n          Add\n        </button>\n        <h1>\n          Total: {total}\n        </h1>\n        <ul>\n          {products.map((product, index) => (\n            <li key={index}>{product.name} - {product.price}</li>\n          ))}\n        </ul> */}\n      </div>\n      {/* </div> */}\n        {/* <h1 style={{padding: \"10px\"}}>\n            {JSON.stringify(info)}\n        </h1> */}\n        {/* <button onClick={handleChange}>Increase</button>  */}\n        {/* Ex counter  */}\n        {/* <h1 style={{padding: \"10px\"}}>\n            {counter}\n        </h1>\n        <button onClick={handleIncrease}>Increase</button> */}    \n      \n      {/* <Container>\n        <Row>\n          <Header/>\n          <TableUsers/>\n        </Row>\n      </Container>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={5000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        theme=\"light\"\n        /> */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}